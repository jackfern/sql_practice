CREATE TABLE members (
  id serial PRIMARY KEY,
  surname varchar,
  first_name varchar,
  address varchar,
  zipcode integer,
  telephone varchar,
  recommended_by integer REFERENCES members(id),
  join_date timestamp without time zone
  );

  CREATE TABLE bookings (id SERIAL PRIMARY KEY, facility_id integer REFERENCES bookings(id), member_id integer REFERENCES members(id), start_time timestamp, slots integer);

  SELECT bookings.start_time FROM members, bookings WHERE first_name = 'David' AND surname = 'Farrell' AND bookings.member_id = members.id;


  SELECT bookings.start_time, facilities.name FROM facilities, bookings WHERE (start_time BETWEEN '2016-09-21 00:00:00' AND '2016-09-21 24:00:00') AND name IN ('Tennis Court 1', 'Tennis Court 2') AND bookings.facility_id = facilities.id;




--   Produce a list of the start times for bookings for tennis courts, for the date '2016-09-21'? Return a list of start time and facility name pairings, ordered by the time.
--
-- Hint: In the WHERE clause use IN. See Example IN Operator


-- Produce a list of all members who have used a tennis court? Include in your output the name of the court, and the name of the member formatted as first name, surname. Ensure no duplicate data, and order by the first name.


SELECT DISTINCT facilities.name, members.first_name, members.surname FROM facilities, bookings, members WHERE name IN ('Tennis Court 1', 'Tennis Court 2') AND bookings.facility_id = facilities.id AND bookings.member_id = members.id ORDER BY first_name ASC;



-- TODO Produce a number of how many times Nancy Dare has used the pool table facility?
--
-- Hint: Two JOINs

SELECT members.first_name, members.surname, facilities.name, COUNT(bookings.slots) AS booking_times FROM facilities, bookings, members WHERE bookings.facility_id = facilities.id AND bookings.member_id = members.id AND first_name = 'Nancy' AND surname = 'Dare' AND name = 'Pool Table' GROUP BY members.first_name, members.surname, facilities.name;



-- Produce a list of how many times Nancy Dare has visited each country club facility.

SELECT members.first_name, members.surname, facilities.name, COUNT(bookings.slots) AS booking_times FROM facilities, bookings, members WHERE bookings.facility_id = facilities.id AND bookings.member_id = members.id AND first_name = 'Nancy' AND surname = 'Dare' GROUP BY members.first_name, members.surname, facilities.name;



-- Produce a list of all members who have recommended another member? Ensure that there are no duplicates in the list, and that results are ordered by (surname, firstname).

-- Hint: SELF JOIN The tables we are joining don't have to be different tables. We can join a table with itself. This is called a self join. In this case we have to use aliases for the table otherwise PostgreSQL will not know which id column of which table instance we mean.
-- Example:
-- FROM tacos ...
--     JOIN tacos ...
--       ON ... = ...
--

SELECT DISTINCT me.surname, me.first_name FROM members AS m, members AS me  WHERE me.id = m.recommended_by;





-- Output a list of all members, including the individual who recommended them (if any), without using any JOINs? Ensure that there are no duplicates in the list, and that member is formatted as one column and ordered by member.
--
-- Hint: To concatenate two columns to look like one you can use the ||
-- Example: SELECT DISTINCT ... || ' ' || ... AS ...,
-- Hint: See Subqueries Here and Here
-- Example:
-- SELECT DISTINCT ... || ' ' ||  ... AS ....,
--     (SELECT ... || ' ' || ... AS ....
--         FROM ... ...
--         WHERE ... = ...
--     ) FROM ... ...

SELECT DISTINCT first_name || ' ' ||  surname AS member, (SELECT first_name AS recommender FROM members AS memb1 WHERE id = memb2.recommended_by) FROM members AS memb2 ORDER BY member;
